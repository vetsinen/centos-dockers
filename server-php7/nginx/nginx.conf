user apache;
pid /var/run/nginx.pid;

# Log only critical errors.
error_log /var/log/nginx/error.log crit;

# Number of CPU
worker_processes 4;

# Number of file descriptors used for Nginx.
# This is set in the OS with 'ulimit -n 200000'
# or using /etc/security/limits.conf
worker_rlimit_nofile 200000;

events {
  # Determine how many clients will be served by each worker process.
  # (Max clients = worker_connections * worker_processes)
  # "Max clients" is also limited by the number of socket connections available on the system (~64k)
  worker_connections 4000;

  # Essential for linux, optmized to serve many clients with each thread.
  use epoll;

  # Accept as many connections as possible, after nginx gets notification about a new connection.
  # May flood worker_connections, if that option is set too low.
  multi_accept on;
}

http {
  include /etc/nginx/mime.types;
  default_type application/octet-stream;

  log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                  '$status $body_bytes_sent "$http_referer" '
                  '"$http_user_agent" "$http_x_forwarded_for"';

  # Buffer log writes to speed up IO.
  access_log /var/log/nginx/access.log main buffer=16k;

  # Speedup IO/Netwoking.
  sendfile on;
  tcp_nopush on;
  tcp_nodelay on;

  # Timeout for keep-alive connections.
  keepalive_timeout 15;
  # Number of requests a client can make over the keep-alive connection.
  #keepalive_requests 100000;
  # Allow the server to close the connection after a client stops responding.
  reset_timedout_connection on;
  # Send the client a "request timed out" if the body is not loaded by this time. Default 60.
  client_header_timeout 12;
  client_body_timeout 12;
  # If the client stops reading data, free up the stale client connection after this much time. Default 60.
  send_timeout 10;

  # Enable servers.
  include /etc/nginx/conf.d/*.conf;
}
